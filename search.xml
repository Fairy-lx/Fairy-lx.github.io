<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/01/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>搭建博客</title>
    <url>/2022/01/18/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>初成长心得</p>
<p>写博客的第一站，试一试、学一学.</p>
<h1 id="学习Vue的第一天"><a href="#学习Vue的第一天" class="headerlink" title="学习Vue的第一天"></a>学习Vue的第一天</h1><p>此时已经对HTML+CSS+JavaScript有了一定的了解，接下来打算学习Vue框架，在开始学习之前看了很多知乎对Vue的视频、书籍、学习方法的推荐，发现大多数都推荐直接看官方文档：</p>
<ol>
<li><p><strong>官方文档</strong>：<a href="https://cn.vuejs.org/">Vue.js官网</a>；</p>
</li>
<li><p><strong>书籍推荐</strong> ：《Vue.js权威指南》；</p>
</li>
<li><p><strong>视频推荐</strong> ：<a href="https://www.imooc.com/new/">慕课网</a>(黄奕老师的课有很多人推荐)</p>
<p><img src="https://img-blog.csdnimg.cn/20201207140137827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xMbGFveWV6aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="官网截图"></p>
</li>
</ol>
<h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h3><p>在正式学习Vue之前，可以先搞懂MVVM,在搞懂MVVM之前我们还需要理解MVC(有一点绕哈，没关系慢慢来看)</p>
<h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><ol>
<li><p>MVC是Model-View- Controller的简写。即模型-视图-控制器。<br><img src="https://img-blog.csdnimg.cn/20201207151907513.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xMbGFveWV6aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
</li>
<li><p>Model：我简单的理解为业务数据信息的表示（就如Java中的实体类）（ps:个人的理解）</p>
  <figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 实体类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> name;<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.name = name;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>View：是数据的显示层（就如Java的一个用于输出的类）</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//显示用于数据的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentView</span> &#123;</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printDetails</span><span class="hljs-params">(<span class="hljs-keyword">String</span> studentName)</span></span>&#123;<br>      System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Student: &quot;</span>);<br>      System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Name: &quot;</span> + studentName);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>Controller：控制层，我理解为是数据模型与数据显示之间的桥梁，有了这座桥我们就可以在更改某一方面而不去影响另外一个方面了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript">   <span class="hljs-comment">//建立Model与View的联系</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentController</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> Student model;<br>   <span class="hljs-keyword">private</span> StudentView view;<br> <br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">StudentController</span>(<span class="hljs-params">Student model, StudentView view</span>)</span>&#123;<br>      <span class="hljs-built_in">this</span>.model = model;<br>      <span class="hljs-built_in">this</span>.view = view;<br>   &#125;<br> <br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setStudentName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>)</span>&#123;<br>      model.setName(name);    <br>   &#125;<br> <br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getStudentName</span>(<span class="hljs-params"></span>)</span>&#123;<br>      <span class="hljs-keyword">return</span> model.getName();    <br>   &#125;<br> <br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">updateView</span>(<span class="hljs-params"></span>)</span>&#123;           <br>      view.printDetails(model.getName());<br>   &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//测试类</span><br>  public <span class="hljs-keyword">class</span> MVCDemo &#123;<br>   public static void main(String<span class="hljs-literal">[]</span> args) &#123;<br> <br>      <span class="hljs-comment">//从数据库获取学生记录</span><br>      Student model  = get<span class="hljs-constructor">Database()</span>;<br> <br>      <span class="hljs-comment">//创建一个视图：把学生详细信息输出到控制台</span><br>      StudentView view = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StudentView()</span>;<br> <br>      StudentController controller = <span class="hljs-keyword">new</span> <span class="hljs-constructor">StudentController(<span class="hljs-params">model</span>, <span class="hljs-params">view</span>)</span>;<br> 	 <span class="hljs-comment">//调用controller的方法来间接调用view的printDetails方法</span><br>      controller.update<span class="hljs-constructor">View()</span>;<br> <br>      <span class="hljs-comment">//更新模型数据</span><br>      <span class="hljs-comment">//间接调用model的setName方法</span><br>      controller.set<span class="hljs-constructor">StudentName(<span class="hljs-string">&quot;John&quot;</span>)</span>;<br> <br>      controller.update<span class="hljs-constructor">View()</span>;<br>   &#125;<br>   <span class="hljs-comment">//从数据库获取学生记录</span><br>   <span class="hljs-keyword">private</span> static Student get<span class="hljs-constructor">Database()</span>&#123;<br>      Student student = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Student()</span>;<br>      student.set<span class="hljs-constructor">Name(<span class="hljs-string">&quot;Robert&quot;</span>)</span>;<br>      student.set<span class="hljs-constructor">RollNo(<span class="hljs-string">&quot;10&quot;</span>)</span>;<br>      return student;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>使用MVC的优势（简单总结，ps:理解比较浅薄）<br><strong>优点</strong>：采用分层方式，使得业务结构清晰，耦合性低，大型项目代码的复用性得到极大的提高，开发人员分工明确，提高了开发的效率，维护方便，降低了维护成本。</p>
</li>
</ol>
<p><strong>缺点</strong>：简单的小型项目，使用MVC设计反而会降低开发效率，层和层虽然相互分离，但是之间关联性太强，没有做到独立的重用。</p>
<h3 id="MMVM（进入正题）"><a href="#MMVM（进入正题）" class="headerlink" title="MMVM（进入正题）"></a>MMVM（进入正题）</h3><ol>
<li><p>MVVM（Model-View-ViewModel）即模型-视图-视图模型<br>（这部分来自<a href="https://www.cnblogs.com/wzfwaf/p/10553160.html">隔壁老主</a>）<br><img src="https://img-blog.csdnimg.cn/20201207152552181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xMbGFveWV6aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>【模型】指的是后端传递的数据。<br>【视图】指的是所看到的页面。<br>【视图模型】mvvm模式的核心，它是连接view和model的桥梁。<br><strong>它有两个方向</strong>：<br>一是将【模型】转化成【视图】，即将后端传递的数据转化成所看到的页面。<br>实现的方式是：数据绑定。<br>二是将【视图】转化成【模型】，即将所看到的页面转化成后端的数据。<br>实现的方式是：DOM 事件监听。<br>这两个方向都实现的，我们称之为数据的双向绑定。<br>总结：在MVVM的框架下视图和模型是<strong>不能直接通信</strong>的。它们通过ViewModel来通信，ViewModel通常要实现一个<strong>observer观察者</strong>，当数据发生变化，ViewModel能够监听到数据的这种变化，然后通知到对应的视图做自动更新，而当用户操作视图，ViewModel也能监听到视图的变化，然后通知数据做改动，这实际上就实现了数据的<strong>双向绑定</strong>。并且MVVM中的View 和 ViewModel可以互相通信。</p>
<h2 id="Vue是一种渐进式的JavaScript框架"><a href="#Vue是一种渐进式的JavaScript框架" class="headerlink" title="Vue是一种渐进式的JavaScript框架"></a>Vue是一种渐进式的JavaScript框架</h2><p>这是官网对Vue的介绍</p>
<blockquote>
<p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>
</blockquote>
</li>
</ol>
<ul>
<li><p>框架：具有约束的项目结构或者写法的功能，能够更好的管理项目，让程序员专注于业务逻辑，是项目的维护拓展。</p>
</li>
<li><p>渐进式：可以在项目的某一个部分使用vue，也可以整个项目都使用vue的写法。它并不强制要求全部使用它的规则进行开发，所以它的主张不强。</p>
</li>
<li><p>自底向上：（还没有理解到位，先留下不写）</p>
<h2 id="Vue初始化"><a href="#Vue初始化" class="headerlink" title="Vue初始化"></a>Vue初始化</h2></li>
<li><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote>
<p>（官网上有三种方式，作为新手还是安分使用官方推荐的）<br><strong>下载地址：</strong><a href="https://cn.vuejs.org/js/vue.js">开发版</a> <a href="https://cn.vuejs.org/js/vue.min.js">生产版</a><br>开发版本：包含有完整的警告和调试模式 相对生产版本大一些（大小：335kb）<br>（在开发版本中引入成功后的提示，在开发过程发生错误也会有提示）<br><img src="https://img-blog.csdnimg.cn/20201207161343297.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xMbGFveWV6aQ==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">生产版本：删除了警告（大小：95kb）<br>（引入成功后没有相应的提示，在开发过程中出错也没有相应的错误提示）<br><img src="https://img-blog.csdnimg.cn/2020120716160681.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xMbGFveWV6aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
<h4 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h4></li>
<li><p>模板引擎</p>
<blockquote>
<p><strong>百度百科解释：</strong><br>模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的HTML文档。<br>模板引擎不属于特定技术领域，它是跨领域跨平台的概念。在Asp下有模板引擎，在PHP下也有模板引擎，在C#下也有，甚至JavaScript、WinForm开发都会用到模板引擎技术。<br><strong>我的理解：</strong><br>(借鉴了很多大佬的思想)<img src="https://img-blog.csdnimg.cn/20201207232149762.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xMbGFveWV6aQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</blockquote>
</li>
</ul>
]]></content>
      <tags>
        <tag>搬运之前的博客</tag>
      </tags>
  </entry>
</search>
